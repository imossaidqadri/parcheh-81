{% assign limit = section.settings.products_to_show %}
<div class="px-[15px] sm:px-[30px] p-[50px]">
  {% if section.settings.heading != blank %}
    <h2 class="page-title text-center mb-[30px]">{{ section.settings.heading }}</h2>
  {% endif %}
  <product-recommendations data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ limit }}">
    <div id="Recommendations-{{ section.id }}" class="recommendations">
    {% if recommendations.performed and recommendations.products_count > 0 %}
      <div
        class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-[15px] items-end"
        id="product-grid"
      >
        {% for product in recommendations.products limit: limit %}
        <div id="product-{{ product.id }}" class="product-card">
          <a class="hover:opacity-100" href="{{ product.url }}">
            <div class="group relative h-fit w-full">
              <!-- Image container -->
              <div class="relative">
                <!-- First image -->
                <img
                  class="transition-all opacity-100 w-full object-cover group-hover:opacity-0"
                  alt="{{ product.title }}"
                  loading="eager"
                  src="{{ product.featured_image | img_url: '600x600' }}"
                  srcset="
                    {{ product.featured_image | img_url: '600x600' }} 600w,
                    {{ product.featured_image | img_url: '900x900' }} 900w,
                    {{ product.featured_image | img_url: '1200x1200' }} 1200w
                  "
                >
                <!-- Second image (hover image) -->
                {% if product.images.size > 1 %}
                  <img
                    class="absolute top-0 left-0 w-full h-full object-contain opacity-0 transition-opacity group-hover:opacity-100"
                    alt="{{ product.title }} (hover)"
                    src="{{ product.images[1] | img_url: '600x600' }}"
                    srcset="
                      {{ product.images[1] | img_url: '600x600' }} 600w,
                      {{ product.images[1] | img_url: '900x900' }} 900w,
                      {{ product.images[1] | img_url: '1200x1200' }} 1200w
                    "
                  >
                {% endif %}
              </div>
              <!-- Text and details -->
              <div class="flex flex-col h-full w-full items-center justify-end pt-[18px]">
                <p class="bold-body text-center font-extrabold text-xs text-ellipsis">
                  <small>{{ product.title }}</small>
                </p>
                <p class="body text-center mt-[2px] text-[10px]">{{ product.price | money }}</p>
              </div>
            </div>
          </a>
        </div>
        {% endfor %}
      </div>
    {% else %}
      <!-- Empty state or loading state -->
      <div class="text-center w-full">
        <p>Loading recommendations...</p>
      </div>
    {% endif %}
    </div>
  </product-recommendations>
</div>

<script>
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();
      this.init();
    }

    init() {
      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        const url = this.dataset.url;
        if (url) {
          fetch(url)
            .then(response => response.text())
            .then(text => {
              const html = document.createElement('div');
              html.innerHTML = text;
              const recommendations = html.querySelector('.recommendations');

              if (recommendations && recommendations.innerHTML.trim().length) {
                this.innerHTML = recommendations.innerHTML;
              }
            })
            .catch(e => {
              console.error(e);
            });
        }
      };

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
</script>
{% schema %}
{
  "name": "Recommended Products",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recommended Products"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        { "value": "h2", "label": "H2" },
        { "value": "h1", "label": "H1" },
        { "value": "h0", "label": "H0" },
        { "value": "hxl", "label": "HXL" },
        { "value": "hxxl", "label": "HXXL" }
      ],
      "default": "h1",
      "label": "Heading Size"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show Description",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_pagination",
      "label": "Show Pagination",
      "default": false
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 25,
      "step": 1,
      "default": 8,
      "label": "Products to Show"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "Columns on Desktop"
    }
  ]
}
{% endschema %}
